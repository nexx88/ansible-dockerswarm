---

 - name: Check if vDVS plugin is installed
   shell: docker plugin ls | grep {{driver_alias}}
   register: docker_plugins
   changed_when: False
   ignore_errors: True
   become: true

 - name: Check vDVS plugin version
   # https://github.com/ansible/ansible/issues/15892#issuecomment-244743623 for escaping {{.PluginReference}}
   command: "docker plugin inspect -f '{{ '{{' }} .PluginReference {{ '}}' }}' {{ docker_plugins.stdout.split(' ')[0] }}"
   register: vdvs_plugin_check
   when: docker_plugins.rc == 0 
   become: true

 - name: debug
   debug: msg="{{vdvs_version}}" 

 - name: Set vDVS version as ansible fact
   set_fact:
      update_needed: "{{ vdvs_plugin_check.stdout.split(':')[1] | version_compare(vdvs_version,'<') }}"
      installed_vdvs_version: "{{ vdvs_plugin_check.stdout.split(':')[1] }}"
   when: vdvs_plugin_check.stdout is defined
 
 - block:
   - name: Disable vDVS plugin
     command: "docker plugin disable -f {{driver_alias}}"
   - name: Update vDVS plugin to {{vdvs_version}}
     command: "docker plugin upgrade --grant-all-permissions {{driver_alias}}:latest {{docker_plugin_registry}}/{{vdvs_plugin_name}}:{{vdvs_version}} --skip-remote-check"
   - name: Enable vDVS plugin
     command: "docker plugin enable {{driver_alias}}"
   when: "{{update_needed|default('False')}}" 
   become: true

 - name: Install vDVS plugin
   command: "docker plugin install --grant-all-permissions --alias {{driver_alias}} {{docker_plugin_registry}}/{{vdvs_plugin_name}}:{{vdvs_version}}"
   when: docker_plugins.rc == 1 
   become: true
